{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ShuffleGraphic","props","state","isVisible","this","setState","setTimeout","hide","bind","perms","permutations","n","length","ctx","refs","canvas","getContext","fillStyle","i","j","beginPath","p","transform","arc","x","y","Math","PI","fill","strokeStyle","lineWidth","p0","moveTo","x1","p1","lineTo","x2","p2","x3","p3","stroke","width","height","Zoom","in","ref","React","Component","StartOptions","instructionsOpen","buttonsVisible","Slide","direction","mountOnEnter","unmountOnExit","className","Typography","variant","align","Button","onClick","handleNewGame","color","size","handleJoinGame","startIcon","toggleInstructions","Paper","closeInstructions","ViewSentences","sentences","intervalID","codeWasValid","showAuthors","currentSentence","showingGraphic","sentence","who","response","style","transitionDelay","Chip","label","name","what","where","why","trim","getData","clearTimeout","isLoaded","body","JSON","stringify","type","code","gameCode","fetch","method","headers","then","res","json","result","gameState","gameStage","hideGraphic","error","request","console","log","newIndex","message","FormControlLabel","control","Switch","checked","onChange","handleSwitch","IconButton","reshuffle","makeSentencePapers","navigate","CircularProgress","FinishedResponses","players","getSentences","Array","entries","index","player","icon","doneWithQuestions","time","push","Grid","item","container","spacing","justify","alignItems","createPlayers","enterNewCode","EnterResponses","currentQuestion","e","target","value","sendResponse","question","explanation","example","responseText","TextField","id","multiline","event","handleResponseChange","handleNext","endIcon","PlayerWaitingRoom","gameJoined","joinGame","playerId","getPlayerData","noGameFound","goToResponses","Badge","badgeContent","HostWaitingRoom","callCounter","codeExpired","gameCreated","createWaitingRoom","createGame","endGame","startGame","button","newCode","disabled","EnterCode","invalid","playerName","handleCodeChange","String","toUpperCase","slice","input","handleBack","EnterName","handleNameChange","Game","onUnload","preventDefault","playerIsHost","leaveGame","playerID","newComponentIsVisible","window","addEventListener","removeEventListener","keepalive","handleEnterNameBack","handleHostNameNext","handlePlayerNameNext","handleEnterCodeBack","handleEnterCodeNext","beginResponses","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c8e6b5ae.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport Chip from '@material-ui/core/Chip';\nimport Badge from '@material-ui/core/Badge';\nimport CreateIcon from '@material-ui/icons/Create';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Paper from '@material-ui/core/Paper';\nimport Slide from '@material-ui/core/Slide';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Zoom from '@material-ui/core/Zoom';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\n\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport green from '@material-ui/core/colors/green';\n\nclass ShuffleGraphic extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisible: true\n    }\n  }\n\n  hide() {\n    this.setState({isVisible: false});\n  }\n \n  componentDidMount() {\n    setTimeout(this.hide.bind(this), 2000)\n    const lineWidth = 2;\n    const dotRadius = 5;\n    const color = \"#3f51b5\";\n    let perms = this.props.permutations;\n    let n = perms[0].length;\n    \n\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = color;\n    \n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < 4; j++) {\n        ctx.beginPath();\n        let p = this.transform(i/(n-1), j/3);\n        ctx.arc(p.x, p.y, dotRadius, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n    }\n\n\n    ctx.beginPath();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    for (let i = 0; i < n; i++) {\n      let p0 = this.transform(i/(n-1), 0);\n      ctx.moveTo(p0.x, p0.y);\n      let x1 = perms[0][i]/(n-1);\n      let p1 = this.transform(x1, 1/3);\n      ctx.lineTo(p1.x, p1.y);\n      let x2 = perms[1][perms[0][i]]/(n-1);\n      let p2 = this.transform(x2, 2/3);\n      ctx.lineTo(p2.x, p2.y);\n      let x3 = perms[2][perms[1][perms[0][i]]]/(n-1);\n      let p3 = this.transform(x3, 1);\n      ctx.lineTo(p3.x, p3.y);\n    }\n    ctx.stroke();\n  }\n\n  transform(x, y) {\n    const padding = 30;\n    const xScale = this.props.width - (2 * padding);\n    const yScale = this.props.height - (2 * padding);\n    return({x: x*xScale + padding, y: y*yScale + padding})\n  }\n\n  render() {\n    return(\n      <Zoom in={this.state.isVisible}>\n      <div>\n        <canvas ref=\"canvas\" width={this.props.width} height={this.props.height}/>\n      </div>\n      </Zoom>\n    )\n  }\n}\n\nclass StartOptions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      instructionsOpen: false,\n      buttonsVisible: true\n    };\n  }\n\n  toggleInstructions() {\n    this.setState({\n      instructionsOpen: !this.state.instructionsOpen,\n      buttonsVisible: !this.state.buttonsVisible\n    });\n  }\n\n  closeInstructions() {\n    this.setState({\n      instructionsOpen: false,\n      buttonsVisible: true\n    });\n  }\n\n  componentWillUnmount() {\n    this.setState({buttonsVisible: false})\n  }\n\n  render() {\n    return (\n      <><Slide direction=\"down\" in={this.state.buttonsVisible} mountOnEnter unmountOnExit><div className=\"start-options\">\n\n          <div className=\"game-title prompt-text\">\n            <Typography variant=\"h4\" align=\"center\">WHO WHAT WHERE WHY</Typography>\n          </div>\n\n          <div className=\"s-o-b\">\n            <Button \n              onClick={this.props.handleNewGame} \n              variant=\"contained\" \n              color=\"primary\" \n              size=\"large\">\n                {'New Game'}\n            </Button>\n          </div>\n            \n          <div className=\"s-o-b\">\n          <Button \n              onClick={this.props.handleJoinGame}\n              variant=\"contained\" \n              color=\"primary\" \n              size=\"large\">\n                {'Join Game'}\n            </Button>\n          </div>\n\n          <div className=\"game-info-button\">\n            <Button startIcon={<InfoIcon />} onClick={() => this.toggleInstructions()}>Instructions</Button>\n          </div>\n\n        </div></Slide>\n\n          <Slide in={this.state.instructionsOpen} direction=\"up\" mountOnEnter unmountOnExit>\n          \n          <div className=\"instructions\">\n            <Paper className=\"instructions-paper\" onClick={() => this.closeInstructions()} variant=\"outlined\">\n              <div className=\"inside-paper-container\">\n              <Typography variant=\"h6\">Introduction</Typography>\n                <Typography variant=\"body1\">\n                  \"Who What Where Why\" is a party game where each player writes a sentence, \n                  and the parts of each sentence are shuffled to make a new set of funny sentences.\n                  The sentences are broken up into four parts: a \"Who\" (eg. \"Ted Dansen\"), a \"What\" \n                  (eg. \"ate all the pistachios\"), a \"Where\" (eg. in iceland), and a \"Why\" (eg. \"because they wanted to\"). \n                  The sentence parts from all the players get shuffled to make the new sentences.\n                </Typography>\n                <div className=\"instruction-list\">\n                <Typography variant=\"h6\">Instructions</Typography>\n                <ol>\n                  <li><Typography variant=\"body1\">\n                  Decide who in your party will be the host\n                </Typography></li>\n                <li><Typography variant=\"body1\">\n                  The host will click 'NEW GAME', enter their name, and get a game code to share with the party \n                  (by zoom call or text or telepathy).\n                </Typography></li>\n                <li><Typography variant=\"body1\">\n                  The rest of the the party will click 'JOIN GAME', enter their name, \n                  and enter the game code shared by the host.\n                </Typography></li>\n                <li><Typography variant=\"body1\">\n                  When the host sees that everyone has joined, they will click 'Start Game'.\n                </Typography></li>\n                <li><Typography variant=\"body1\">\n                  All players will fill out the four sentence parts: Who, What, Where, and Why.\n                </Typography></li>\n                <li><Typography variant=\"body1\">\n                  When everyone has completed their sentences the parts will be shuffled and everyone will see the new, \n                  (hopefully humorous), sentences. The host can reshuffle the sentences to continue the hilarity!\n                </Typography></li>\n                </ol>\n                </div>\n              </div>\n            </Paper>  \n          \n          </div>\n          </Slide></>\n      \n      \n    );\n  }\n}\n\nclass ViewSentences extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      sentences: [],\n      intervalID: null,\n      codeWasValid: false,\n      showAuthors: false,\n      currentSentence: 0,\n      permutations: [],\n      showingGraphic: true\n    };\n  }\n\n  makeSentencePapers() {\n    let sentence = this.state.sentences[this.state.currentSentence];\n    let sentencePaper;\n    if (!this.state.showAuthors) {\n      sentencePaper =\n        <Zoom in={true}>\n        <div className=\"single-response\">\n          <Typography variant=\"h5\" align=\"center\">\n            {sentence.who.response.trim() + \" \" +\n            sentence.what.response.trim() + \" \" +\n            sentence.where.response.trim() + \" \" +\n            sentence.why.response.trim()}\n          </Typography>\n        </div>\n        </Zoom>;\n    } else {\n      sentencePaper =\n      <>\n        <div className=\"single-response\">\n          <Zoom in={this.state.showAuthors}>\n            <Typography variant=\"h5\" align=\"center\">{sentence.who.response}</Typography>\n          </Zoom>\n          <Zoom in={this.state.showAuthors} style={{ transitionDelay: '100ms' }}>\n            <Chip variant=\"outlined\" size=\"small\" label={sentence.who.name} color=\"primary\"/>\n          </Zoom>\n        </div>\n        \n        <div className=\"single-response\">\n          <Zoom in={this.state.showAuthors}>\n            <Typography variant=\"h5\" align=\"center\">{sentence.what.response}</Typography>\n          </Zoom>\n          <Zoom in={this.state.showAuthors} style={{ transitionDelay: '200ms' }}>\n            <Chip variant=\"outlined\" size=\"small\" label={sentence.what.name} color=\"primary\"/>\n          </Zoom>\n        </div>\n\n        <div className=\"single-response\">\n          <Zoom in={this.state.showAuthors}>\n            <Typography variant=\"h5\" align=\"center\">{sentence.where.response}</Typography>\n          </Zoom>\n          <Zoom in={this.state.showAuthors} style={{ transitionDelay: '300ms' }}>\n            <Chip variant=\"outlined\" size=\"small\" label={sentence.where.name} color=\"primary\"/>\n          </Zoom>\n        </div>\n\n        <div className=\"single-response\">\n          <Zoom in={this.state.showAuthors}>\n            <Typography variant=\"h5\" align=\"center\">{sentence.why.response}</Typography>\n          </Zoom>\n          <Zoom in={this.state.showAuthors} style={{ transitionDelay: '400ms' }}>\n            <Chip variant=\"outlined\" size=\"small\" label={sentence.why.name} color=\"primary\"/>\n          </Zoom>\n        </div>\n      </>;\n    }\n    return(sentencePaper);\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.intervalID);\n  }\n\n  hideGraphic() {\n    this.setState({showingGraphic: false})\n  }\n\n  reshuffle() {\n    this.setState({isLoaded: false});\n    let body = JSON.stringify(\n      {\n        type: \"create-sentences\",\n        code: this.props.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.codeWasValid) {\n            this.setState({codeWasValid: true});\n            if (result.gameState.gameStage == \"sentences-created\") {\n              this.setState({\n                showingGraphic: true,\n                sentences: result.gameState.sentences,\n                permutations: result.gameState.permutations,\n                isLoaded: true\n              });\n              setTimeout(this.hideGraphic.bind(this), 3000);\n            } \n          } else {\n            this.setState({\n              isLoaded: true,\n              codeWasValid: false\n            });\n          }\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      );\n  }\n\n  getData() {\n    let body = JSON.stringify(\n      {\n        type: \"get-game-state\",\n        code: this.props.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from ViewSentences/getData');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.codeWasValid) {\n            this.setState({codeWasValid: true});\n            if (result.gameState.gameStage == \"sentences-created\") {\n              this.setState({\n                sentences: result.gameState.sentences,\n                permutations: result.gameState.permutations,\n                isLoaded: true\n              });\n              clearTimeout(this.state.intervalID);\n              setTimeout(this.hideGraphic.bind(this), 3000);\n            } else {\n              let intervalID = setTimeout(this.getData.bind(this), 4000);\n              this.setState({intervalID: intervalID});\n            }\n          } else {\n            this.setState({codeWasValid: false});\n          }\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      );\n  }\n\n  handleSwitch() {\n    this.setState({showAuthors: !this.state.showAuthors});\n  }\n\n  navigate(i) {\n    const newIndex = (this.state.currentSentence + i) % this.state.sentences.length;\n    this.setState({currentSentence: newIndex});\n  }\n\n  render() {\n    if (this.state.error) {\n      return (<div>Error: {this.state.error.message}</div>);\n    } else if (!this.state.isLoaded) {\n      return(<CircularProgress />);\n    } else {\n      if (this.state.codeWasValid) {\n        if (this.state.showingGraphic) {\n          console.log(this.state.permutations)\n          return(\n            <ShuffleGraphic width={250} height={250} permutations={this.state.permutations}/>\n          );\n        } else {\n          return(\n            <div className=\"prompt-text\">\n\n                <div className=\"show-authors\">\n                  <FormControlLabel \n                    control={\n                      <Switch\n                        checked={this.state.showAuthors}\n                        onChange={() => this.handleSwitch()}\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Show Authors\"\n                  />\n                  <IconButton onClick={() => this.reshuffle()}>\n                    <ShuffleIcon />\n                  </IconButton>\n                </div>\n                \n                <div className=\"sentence\">\n                  <div className=\"sentence-inside\" >{this.makeSentencePapers()}</div>\n                </div>\n                \n                <div className=\"bottom-nav\">\n                  <IconButton color=\"primary\" onClick={() => this.navigate(this.state.sentences.length - 1)}>\n                    <NavigateBeforeIcon />\n                  </IconButton>\n                  <Typography variant=\"body1\" align=\"center\">\n                    {(this.state.currentSentence+1) + \"/\" + this.state.sentences.length}\n                  </Typography>\n                  <IconButton color=\"primary\" onClick={() => this.navigate(1)}>\n                    <NavigateNextIcon />\n                  </IconButton>\n                </div>\n\n            </div>\n          )\n        }\n      } else {\n\n      }\n    }\n  }\n}\n\nclass FinishedResponses extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [],\n      isLoaded: false,\n      codeWasValid: false,\n      intervalID: null\n    }\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.intervalID);\n  }\n\n  getSentences() {\n    clearTimeout(this.state.intervalID);\n    this.props.getSentences();\n  }\n\n  getData() {\n    let body = JSON.stringify(\n      {\n        type: \"get-game-state\",\n        code: this.props.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from FinishedResponses/getData');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.codeWasValid) {\n            if (result.gameState.gameStage == \"all-players-waiting\" || result.gameState.gameStage == 'sentences-created') {\n              this.getSentences();\n            } else {\n              let intervalID = setTimeout(this.getData.bind(this), 4000);\n              this.setState({\n                players: result.gameState.players,\n                intervalID: intervalID\n              });\n              if(!this.state.isLoaded) {\n                this.setState({\n                  isLoaded: true,\n                  codeWasValid: true\n                })\n              }\n            } \n          } else {\n            this.setState({\n              codeWasValid: false,\n              isLoaded: true\n            });\n          }\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      );\n  }\n\n  createPlayers() {\n    let players = Array();\n    for (let [index, player] of this.state.players.entries()) {\n      let icon;\n      if (player.doneWithQuestions) {\n        icon = <CheckCircleIcon/>\n      } else {\n        icon = <CreateIcon/>\n      }\n      let time = (100 * (index+1)) + 'ms';\n      players.push(\n        <Grid item>\n          <Zoom in={true} style={{ transitionDelay: time }}>\n            <Chip icon={icon} label={player.name} color=\"primary\"/>\n          </Zoom>\n        </Grid>\n      );\n    }\n    return(players);\n  }\n\n  render() {\n    \n    if (this.state.error) {\n      return (<div>Error: {this.state.error.message}</div>);\n    } else if (!this.state.isLoaded) {\n      return(<CircularProgress />);\n    } else {\n      if (this.state.codeWasValid) {\n        return(\n          <Slide in={true} mountOnEnter unmountOnExit>\n          <div className=\"prompt-text\">\n            <Grid container direction=\"column\" spacing={5} justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"h4\" align=\"center\">\n                  Waiting for all players to finish\n                </Typography>\n              </Grid>\n\n              <Grid item>\n                <Grid container direction=\"row\" spacing={2} justify=\"center\" alignItems=\"center\">\n                  {this.createPlayers()}\n                </Grid>\n              </Grid>\n\n            </Grid>\n          </div>\n          </Slide>\n        );\n      } else{\n        return(\n          <div className=\"prompt-text\">\n            <Grid container direction=\"column\" spacing={4} justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"h5\" align=\"center\" >\n                  looks like your game no longer exists\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Button \n                  onClick={() => this.props.enterNewCode()}\n                  variant=\"contained\" \n                  color=\"primary\">\n                  Enter Another Code\n                </Button>\n              </Grid>           \n            </Grid>\n          </div>\n        );\n      }\n    }\n  }\n}\n\nclass EnterResponses extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      response: {\n        name: props.name,\n        who: \"\",\n        what: \"\",\n        where: \"\",\n        why: \"\"\n      },\n      currentQuestion: \"who\"\n    }\n  }\n\n  handleResponseChange(e) {\n    let response = {\n      name: this.props.name,\n      who: this.state.response.who,\n      what: this.state.response.what,\n      where: this.state.response.where,\n      why: this.state.response.why\n    };\n    if (this.state.currentQuestion == \"who\") {\n      response.who = e.target.value;\n    } else if (this.state.currentQuestion == \"what\") {\n      response.what = e.target.value;\n    } else if (this.state.currentQuestion == \"where\") {\n      response.where = e.target.value;\n    } else if (this.state.currentQuestion == \"why\") {\n      response.why = e.target.value;\n    }\n    this.setState({\n      response: response\n    })\n  }\n\n  handleNext() {\n    if (this.state.currentQuestion == \"who\") {\n      this.setState({currentQuestion: \"what\"});\n    } else if (this.state.currentQuestion == \"what\") {\n      this.setState({currentQuestion: \"where\"});\n    } else if (this.state.currentQuestion == \"where\") {\n      this.setState({currentQuestion: \"why\"});\n    } else if (this.state.currentQuestion == \"why\") {\n      this.props.sendResponse(this.state.response);\n    }\n  }\n\n  render() {\n    let question;\n    let explanation;\n    let example;\n    let pronounStuff;\n    let responseText;\n    if (this.state.currentQuestion == \"who\") {\n      responseText = this.state.response.who\n      question = \"WHO\";\n      explanation = \"enter any person or animal etc\";\n      example = \" eg. 'Obama' or 'Obama's dog, Bo'\";\n      pronounStuff = <div></div>;\n    } else if (this.state.currentQuestion == \"what\") {\n      responseText = this.state.response.what\n      question = \"WHAT\";\n      explanation = \"enter an action\";\n      example = \" eg. 'went for a bike ride' or 'slept'\";\n      pronounStuff = \n        <Typography variant=\"body1\">\n          tip: if you want to write something like 'went to HER appartment', you could enter\n          'went to THEIR appartment' instead to make the final sentence make more sense. \n          (they / them / their / theirs / themself)\n        </Typography>;\n    } else if (this.state.currentQuestion == \"where\") {\n      responseText = this.state.response.where\n      question = \"WHERE\";\n      explanation = \"enter where, when or how the thing happened \"\n      example = \" eg. 'on their birthday' or 'with Batman'\";\n      pronounStuff = \n        <Typography variant=\"body1\">\n          tip: if you want to write something like 'with HIS uncle', you could enter\n          'with THEIR uncle' instead to make the final sentence make more sense. \n          (they / them / their / theirs / themself)\n        </Typography>;\n    } else if (this.state.currentQuestion == \"why\") {\n      responseText = this.state.response.why\n      question = \"WHY\"\n      explanation = \"enter an explanation or other clause\";\n      example = \" eg. 'because they wanted to.' or 'in order to protect baby yoda.'\";\n      pronounStuff =\n        <Typography variant=\"body1\">\n          tip: if you want to write something like 'because SHE WAS sad', you could enter\n          'because THEY WERE sad' instead to make the final sentence make more sense. \n          (they / them / their / theirs / themself)\n        </Typography>\n    }\n    return(\n      <Slide in={true} mountOnEnter unmountOnExit>\n      <div className=\"prompt-text\">\n        <Grid container direction=\"column\" spacing={5} justify=\"center\" alignItems=\"center\">\n\n          <Grid item>\n            <Grid container direction=\"column\" spacing={1} justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"h3\" align=\"center\">{question}</Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\" align=\"center\">{explanation}</Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body2\" align=\"center\">{example}</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <TextField \n              id=\"standard-basic\" \n              label={question} \n              multiline\n              onChange={(event) => this.handleResponseChange(event)}\n              value={responseText}\n            />\n          </Grid>\n\n          <Grid item>\n            <Button \n              onClick={() => this.handleNext()}\n              variant=\"contained\" \n              color=\"primary\" \n              endIcon={<NavigateNextIcon/>}>\n                Next\n            </Button>\n          </Grid>\n\n        </Grid>\n      </div>\n      </Slide>\n    );\n  }\n}\n\nclass PlayerWaitingRoom extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      players: [],\n      codeWasValid: false,\n      intervalID: null\n    }\n  }\n\n  componentDidMount() {\n    if (!this.props.gameJoined) {\n      this.joinGame();\n    } else {\n      this.getData();\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.intervalID);\n  }\n\n  joinGame() {\n    let body = JSON.stringify(\n      {\n        type: \"enter-waiting-room\",\n        name: this.props.name,\n        code: this.props.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from PlayerWaitingRoom/joinGame');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.codeWasValid) {\n            this.props.joinGame(result.playerId);\n            this.setState({\n              isLoaded: true,\n              players: result.gameState.players,\n              codeWasValid: true,\n            });\n            this.getPlayerData()\n          } else {\n            this.props.noGameFound();\n          }\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      );\n  }\n\n  goToResponses() {\n    clearTimeout(this.state.intervalID);\n    this.props.goToResponses()\n  }\n\n  getPlayerData() {\n    let body = JSON.stringify(\n      {\n        type: \"get-game-state\",\n        code: this.props.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from PlayerWaitingRoom/getPlayerData');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.codeWasValid) {\n            let intervalID = setTimeout(this.getPlayerData.bind(this), 4000);\n            this.setState({\n              players: result.gameState.players,\n              intervalID: intervalID\n            });\n            if (result.gameState.gameStage == \"in-progress\") {\n              this.goToResponses();\n            } \n            \n          } else {\n            this.setState({\n              codeWasValid: false\n            });\n          }\n        },\n        (error) => {\n          this.setState({\n            error: error\n          });\n        }\n      );\n  }\n\n  createPlayers() {\n    let players = Array();\n    for (let [index, player] of this.state.players.entries()) {\n      let time = (100 * (index+1)) + 'ms';\n      if (player.id == \"1\") {\n        players.push(\n          <Grid item>\n            <Zoom in={true} style={{ transitionDelay: time }}>\n            <Badge badgeContent=\"Host\" color=\"secondary\">\n              <Chip label={player.name} color=\"primary\"/>\n            </Badge>\n            </Zoom>\n          </Grid>\n        );\n      } else {\n        players.push(\n          <Grid item>\n            <Zoom in={true} style={{ transitionDelay: time }}>\n            <Chip label={player.name} color=\"primary\"/>\n            </Zoom>\n          </Grid>\n        );\n      }\n    }\n    return(players);\n  }\n\n  render() {\n    if (this.state.error) {\n      return (<div>Error: {this.state.error.message}</div>);\n    } else if (!this.state.isLoaded) {\n      return(<CircularProgress />);\n    } else {\n      if (this.state.codeWasValid) {\n        return(\n          <Slide in={true} mountOnEnter unmountOnExit>\n          <div className=\"prompt-text\">\n            <Grid container direction=\"column\" spacing={5} justify=\"center\" alignItems=\"center\">\n\n              <Grid item>\n                <Typography variant=\"h4\" align=\"center\" >\n                  You're in the waiting room! \n                </Typography>\n              </Grid>\n\n              <Grid item>\n                <Grid container direction=\"column\" spacing={2} justify=\"center\" alignItems=\"center\">\n                  <Grid item>\n                    <Typography variant=\"h5\" align=\"center\" >players:</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Grid container direction=\"row\" spacing={2} justify=\"center\" alignItems=\"center\">\n                      {this.createPlayers()}\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item>\n                <Typography variant=\"h5\" align=\"center\" >\n                  {\"game: \" + this.props.gameCode}\n                </Typography>\n              </Grid>\n\n            </Grid>\n          </div>\n          </Slide>\n        );\n      } else {\n        return(\n          <div className=\"prompt-text\">\n            <Grid container direction=\"column\" spacing={4} justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"h5\" align=\"center\" >\n                  That game no longer exists (the host could have lost connection)\n                </Typography>\n              </Grid>\n              <Grid item>\n              <Button \n                onClick={() => this.props.enterNewCode()}\n                variant=\"contained\" \n                color=\"primary\" >\n                Enter Another Code\n              </Button>\n\n              </Grid>\n              \n            </Grid>\n          </div>\n        );\n      }\n    }\n  }\n}\n\nclass HostWaitingRoom extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      players: Array(),\n      code: \"\",\n      callCounter: 0,\n      codeExpired: false,\n      intervalID: null\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.intervalID);\n  }\n\n  componentDidMount() {\n    if (!this.props.gameCreated) {\n      this.createWaitingRoom();\n    } else {\n      this.getData();\n    }\n  }\n\n  createWaitingRoom() {\n    let body = JSON.stringify(\n      {\n        type: \"create-waiting-room\",\n        name: this.props.name\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from HostWaitingRoom/createWaitingRoom');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.props.createGame(result.gameState, result.playerId);\n          let intervalID = setTimeout(this.getData.bind(this), 4000);\n          this.setState({\n            isLoaded: true,\n            code: result.gameState.code,\n            players: result.gameState.players,\n            intervalID: intervalID\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      );\n  }\n\n  getData() {\n    let body = JSON.stringify(\n      {\n        type: \"get-game-state\",\n        code: this.state.code\n      }\n    )\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from HostWaitingRoom/getData');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            players: result.gameState.players,\n            callCounter: this.state.callCounter + 1\n          });\n          if (this.state.callCounter < 600) {\n            let intervalID = setTimeout(this.getData.bind(this), 4000);\n            this.setState({intervalID: intervalID});\n          } else {\n            this.setState({\n              codeExpired: true\n            })\n            this.props.endGame();\n          }\n        },\n        (error) => {\n          this.setState({\n            error: error\n          });\n        }\n      );\n  }\n\n  newCode() {\n    this.setState({\n      codeExpired: false,\n      callCounter: 0,\n      isLoaded: false,\n    });\n    this.createWaitingRoom()\n  }\n\n  createPlayers() {\n    let players = Array();\n    for (let [index, player] of this.state.players.entries()) {\n      let time = (100 * (index+1)) + 'ms';\n      if (player.id == \"1\") {\n        players.push(\n            <div className=\"player-chip\">\n              <Zoom in={true} style={{ transitionDelay: time }}>\n              <Badge badgeContent=\"Host\" color=\"secondary\">\n                <Chip label={player.name} color=\"primary\"/>\n              </Badge>\n              </Zoom>\n            </div>\n        );\n        \n      } else {\n        players.push(\n          <div className=\"player-chip\">\n            <Zoom in={true} style={{ transitionDelay: time }}>\n            <Chip label={player.name} color=\"primary\"/>\n            </Zoom>\n          </div>\n        )\n      }\n    }\n    return(<div className=\"player-list\">{players}</div>)\n  }\n\n  startGame() {\n    clearTimeout(this.state.intervalID);\n    this.props.startGame();\n  }\n\n  render() {\n    if (this.state.error) {\n      return (<div>Error: {this.state.error.message}</div>);\n    } else if (!this.state.isLoaded) {\n      return(<CircularProgress />);\n    } else {\n      if (!this.state.codeExpired) {\n        let button;\n        if (this.state.players.length > 1) {\n          button = \n            <Button \n              onClick={() => this.startGame()}\n              variant=\"contained\" \n              color=\"primary\" >\n              Start Game\n            </Button>\n        } else {\n          button = \n            <Button \n              disabled\n              onClick={() => this.startGame()}\n              variant=\"contained\" \n              color=\"primary\" >\n              Start Game\n            </Button>\n        }\n        return(\n          <Slide in={true} mountOnEnter unmountOnExit>\n          <div className=\"flex-column\">\n            <div className=\"margin10\">\n              <div className=\"margin5\"><Typography variant=\"h5\" align=\"center\" >Your Game Code is:</Typography></div>\n\n              <div className=\"margin5\"><Typography variant=\"h3\" align=\"center\" >{this.state.code}</Typography></div>\n            </div>\n\n            <div className=\"margin10\">\n              <div className=\"margin5\"><Typography variant=\"h5\" align=\"center\" >players:</Typography></div>\n\n              <div className=\"margin10\">{this.createPlayers()}</div>\n            </div>\n\n            <div className=\"margin10\">{button}</div>\n           </div>\n           </Slide>\n\n        );\n      } else {\n        return(\n          <div className=\"prompt-text\">\n            <Grid container direction=\"column\" spacing={5} justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"h5\" align=\"center\" >Your game code has expired</Typography>\n              </Grid>\n              <Grid item>\n              <Button \n                  onClick={() => this.newCode()}\n                  variant=\"contained\" \n                  color=\"primary\" \n                  >\n                    Get New Code\n                </Button>\n              </Grid>\n            </Grid>\n          </div>\n        );\n      }\n    }\n  }\n}\n\nclass EnterCode extends React.Component {\n\n  constructor(props) {\n    super(props);\n    let message;\n    if (props.invalid) {\n      message = \"Sorry \" + props.playerName + \", the code you entered is invalid.\";\n    } else {\n      message = \"How's it goin \" + props.playerName + \", Enter your game's 4 letter code\";\n    }\n    this.state = {\n      code: '',\n      message: message\n    };\n    props.handleCodeChange('');\n  }\n\n  handleCodeChange(event) {\n    let code = String(event.target.value);\n    code = code.toUpperCase();\n    if (code.length > 4) {\n      code = code.slice(0, 4);\n    }\n    this.setState({code: code});\n    this.props.handleCodeChange(code);\n  }\n\n  render() {\n\n    let input;\n    if (!this.props.invalid) {\n      input = <TextField \n        id=\"standard-basic\" \n        label=\"code\" \n        onChange={(e) => this.handleCodeChange(e)}\n        value={this.state.code}\n      />\n    } else {\n      input = <TextField \n        error\n        id=\"standard-basic\" \n        label=\"invalid code\" \n        onChange={(e) => this.handleCodeChange(e)}\n        value={this.state.code}\n      />\n    }\n\n    return(\n      <Zoom in={true}>\n        <div className=\"flex-column\">\n        <div className=\"margin15 prompt-text\">\n          <Typography variant=\"h5\" align=\"center\" >{this.state.message}</Typography>\n        </div>\n\n        <div className=\"margin15\">{input}</div>\n\n        <div className=\"back-next-buttons\">\n          <div className=\"back-button\">\n            <Button \n              onClick={this.props.handleBack}\n              variant=\"contained\" \n              color=\"primary\" \n              startIcon={<NavigateBeforeIcon/>}>\n                Back \n            </Button>\n          </div>\n          <div className=\"next-button\">\n            <Button \n              onClick={this.props.handleNext}\n              variant=\"contained\" \n              color=\"primary\" \n              endIcon={<NavigateNextIcon/>}>\n                Next\n            </Button>\n          </div>\n        </div>\n        </div>\n      </Zoom>\n    );\n  }\n  \n}\n\nclass EnterName extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {name: \"\"};\n    props.handleNameChange(\"\")\n  }\n\n  handleNameChange(event) {\n    this.setState({name: event.target.value});\n    this.props.handleNameChange(event.target.value)\n  }\n\n  render() {\n    let input;\n    if (!this.props.invalid) {\n      input = <TextField \n        id=\"standard-basic\" \n        label=\"Enter Your Name\" \n        onChange={(event) => this.handleNameChange(event)}\n        value={this.state.name}\n      />;\n    } else {\n      input = <TextField \n        error\n        id=\"standard-basic\" \n        label=\"name is required\" \n        onChange={(event) => this.handleNameChange(event)}\n        value={this.state.name}\n      />\n    }\n    return(\n      <Zoom in={true} mountOnEnter unmountOnExit>\n        <div className=\"flex-column\">\n          <div className=\"margin15 prompt-text\">\n            <Typography variant=\"h5\" align=\"center\" >{this.props.message}</Typography>\n          </div>\n\n        <div className=\"margin15\">{input}</div>\n\n        <div className=\"back-next-buttons\">\n          <div className=\"back-button\">\n          <Button \n            className=\"back-button\"\n            onClick={this.props.handleBack}\n            variant=\"contained\" \n            color=\"primary\" \n            startIcon={<NavigateBeforeIcon/>}>\n              Back \n          </Button>\n          </div>\n\n          <div className=\"next-button\">\n          <Button \n            onClick={this.props.handleNext}\n            variant=\"contained\" \n            color=\"primary\" \n            endIcon={<NavigateNextIcon/>}>\n              Next\n          </Button>\n          </div>\n        </div>\n        </div>\n      </Zoom>\n    );\n  }\n  \n}\n\nclass Game extends React.Component { \n  constructor(props) {\n    super(props)\n    this.state = {\n      gameState: \"start-options\",\n      playerName: \"\",\n      gameCode: \"\",\n      playerIsHost: false,\n      gameCreated: false,\n      gameJoined: false,\n      playerID: 0,\n      newComponentIsVisible: false\n    }\n  }\n\n  onUnload = e => {\n    e.preventDefault();\n    if (this.state.playerIsHost && this.state.gameCreated) {\n      this.endGame();\n    } else if (!this.state.playerIsHost && this.state.gameJoined) {\n      this.leaveGame();\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"beforeunload\", this.onUnload);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"beforeunload\", this.onUnload);\n  }\n\n  handleNewGame() {\n    this.setState({\n      gameState: \"enter-host-name\",\n      playerIsHost: true\n    });\n  }\n\n  handleJoinGame() {\n    this.setState({\n      gameState: \"enter-player-name\",\n      playerIsHost: false\n    });\n  }\n\n  handleEnterNameBack() {\n    this.setState({gameState: \"start-options\"});\n  }\n\n  handleHostNameNext() {\n    if (this.state.playerName != \"\") {\n      this.setState({gameState: \"host-waiting-room\"})\n    } else {\n      this.setState({gameState: \"invalid-host-name\"})\n    }\n  }\n\n  handlePlayerNameNext() {\n    if (this.state.playerName != \"\") {\n      this.setState({gameState: \"enter-game-code\"})\n    } else {\n      this.setState({gameState: \"invalid-player-name\"});\n    }\n  }\n\n  handleEnterCodeBack() {\n    this.setState({gameState: \"enter-player-name\"})\n  }\n\n  handleEnterCodeNext() {\n    if (this.state.gameCode.length == 4) {\n      this.setState({gameState: \"player-waiting-room\"})\n    } else {\n      this.setState({gameState: \"invalid-code\"})\n    }\n  }\n\n  handleNameChange(name) {\n    this.setState({playerName: name});\n  }\n\n  handleCodeChange(code) {\n    this.setState({gameCode: code});\n  }\n\n  joinGame(playerID) {\n    this.setState({\n      playerID: playerID,\n      gameJoined: true\n    });\n    console.log(this.state.playerID);\n  }\n\n  enterNewCode() {\n    this.setState({\n      playerID: 0,\n      gameJoined: false,\n      gameCode: \"\",\n      gameState: \"enter-game-code\"\n    });\n  }\n\n  createGame(gameState, playerID) {\n    this.setState({\n      gameCode: gameState.code,\n      playerID: playerID,\n      gameCreated: true\n    })\n  }\n\n  beginResponses() {\n    this.setState({gameState: \"enter-responses\"});\n  }\n\n  startGame() {\n    this.setState({\n      gameState: 'enter-responses'\n    });\n    let body = JSON.stringify(\n      {\n        type: \"start-game\",\n        code: this.state.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from Game/startGame');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {},\n        (error) => {}\n      );\n  }\n\n  sendResponse(response) {\n    let body = JSON.stringify(\n      {\n        type: \"post-response\",\n        playerId: this.state.playerID,\n        response: response,\n        code: this.state.gameCode,\n        name: this.state.playerName\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from Game/sendResponse');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {},\n        (error) => {}\n      );\n    this.setState({gameState: \"finished-responses\"});\n  }\n\n  getSentences() {\n    if (this.state.playerIsHost) {\n      let body = JSON.stringify(\n        {\n          type: \"create-sentences\",\n          code: this.state.gameCode,\n        }\n      );\n      const request = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: body\n      };\n      console.log('request sent from Game/getSentences');\n      fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n        .then(res => res.json())\n        .then(\n          (result) => {},\n          (error) => {}\n        );\n    }\n    this.setState({gameState: \"view-sentences\"});\n  }\n\n  endGame() {\n    let body = JSON.stringify(\n      {\n        type: \"end-game\",\n        code: this.state.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body,\n      keepalive: true\n    };\n    console.log('request sent from Game/endGame');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            gameCreated: false,\n            gameCode: \"\",\n        });}\n        ,\n        (error) => {}\n      );\n    \n  }\n\n  leaveGame() {\n    let body = JSON.stringify(\n      {\n        type: \"leave-game\",\n        code: this.state.gameCode,\n        playerId: this.state.playerID\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body,\n      keepalive: true\n    };\n    console.log('request sent from Game/endGame');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            gameJoined: false,\n            gameCode: \"\",\n          });\n        },\n        (error) => {}\n      );\n    \n  }\n\n  render() {\n    if (this.state.gameState == \"start-options\") {\n      return(\n          <StartOptions \n            handleNewGame={() => this.handleNewGame()} \n            handleJoinGame={() => this.handleJoinGame()}\n          />\n        );\n    } else if (this.state.gameState == \"enter-host-name\") {\n      return(\n        <EnterName \n          message=\"You're the game host!\" \n          invalid={false}\n          handleBack={() => this.handleEnterNameBack()}\n          handleNext={() => this.handleHostNameNext()}\n          handleNameChange={(name) => this.handleNameChange(name)}\n        />);\n\n    } else if (this.state.gameState == \"enter-player-name\") {\n      return(\n        <EnterName \n          message=\"Enter your name to display\" \n          invalid={false}\n          handleBack={() => this.handleEnterNameBack()}\n          handleNext={() => this.handlePlayerNameNext()}\n          handleNameChange={(name) => this.handleNameChange(name)}\n        />);\n    } else if (this.state.gameState == \"enter-game-code\") {\n      return(\n        <EnterCode \n          playerName={this.state.playerName}\n          invalid={false}\n          handleBack={() => this.handleEnterCodeBack()}\n          handleNext={() => this.handleEnterCodeNext()}\n          handleCodeChange={(code) => this.handleCodeChange(code)}\n        />);\n    } else if (this.state.gameState == \"invalid-player-name\") {\n      return(\n        <EnterName\n          message=\"You can type literally anything except for that.\"\n          invalid={true}\n          handleBack={() => this.handleEnterNameBack()}\n          handleNext={() => this.handlePlayerNameNext()}\n          handleNameChange={(name) => this.handleNameChange(name)}\n        />);\n    } else if (this.state.gameState == \"invalid-code\") {\n      return(\n        <EnterCode \n            playerName={this.state.playerName}\n            invalid={true}\n            handleBack={() => this.handleEnterCodeBack()}\n            handleNext={() => this.handleEnterCodeNext()}\n            handleCodeChange={(code) => this.handleCodeChange(code)}\n        />);\n    } else if (this.state.gameState == \"invalid-host-name\") {\n      return(\n        <EnterName \n          message=\"You have to have a name\" \n          invalid={true}\n          handleBack={() => this.handleEnterNameBack()}\n          handleNext={() => this.handleHostNameNext()}\n          handleNameChange={(name) => this.handleNameChange(name)}\n        />);\n    } else if (this.state.gameState == \"host-waiting-room\") {\n      return(\n        <HostWaitingRoom\n          gameCreated={this.state.gameCreated}\n          name={this.state.playerName}\n          createGame={(gameState, playerID) => this.createGame(gameState, playerID)}\n          endGame={() => this.endGame()}\n          newCode={() => this.handleHostNameNext()}\n          startGame={() => this.startGame()}\n        />\n      );\n    } else if (this.state.gameState == \"player-waiting-room\") {\n      return(\n        <PlayerWaitingRoom\n          gameCode={this.state.gameCode}\n          name={this.state.playerName}\n          gameJoined={this.state.gameJoined}\n          joinGame={(playerID) => this.joinGame(playerID)}\n          noGameFound={() => this.setState({gameState: \"invalid-code\"})}\n          goToResponses={() => this.beginResponses()}\n          enterNewCode={() => this.enterNewCode()} />\n      );\n    } else if (this.state.gameState == \"enter-responses\") {\n      return(\n        <EnterResponses\n          name={this.state.playerName}\n          sendResponse={(response) => this.sendResponse(response)}/>\n      );\n    }  else if (this.state.gameState == \"finished-responses\")  {\n      return(\n        <FinishedResponses\n          gameCode={this.state.gameCode}\n          getSentences={() => this.getSentences()}\n          enterNewCode={() => this.enterNewCode()}/>\n      )\n    } else if (this.state.gameState == \"view-sentences\") {\n      return(\n        <ViewSentences gameCode={this.state.gameCode}/>\n      )\n    }\n  }\n\n}\n\nfunction App() {\n  return (\n    <div className=\"whole-window\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}